import { Authentication, GetAssetsParams, GetAnAssetByIDorSymbol, GetOptionContracts, GetOptionContractByIDorSymbol, GetAnnouncements, CreateAnOrder, GetAllOrders, GetOrderById, ReplaceOrderbyID, DeleteOrderbyID, CloseAllPositions, GetOpenPosition, ClosePosition, ExerciseOptionPosition, GetAccountPortfolioHistory, CreateWatchlist, GetWatchlistbyID, UpdateWatchlistById, AddAssettoWatchlist, DeleteWatchlistById, GetWatchlistbyName, UpdateWatchlistByName, AddAssettoWatchlistByName, DeleteWatchlistByName, DeleteSymbolfromWatchlist, AccountConfigurations, GetMarketCalendarinfo, GetRetrieveCryptoFundingWallets, RequestNewWithdrawal, GetRetrieveCryptoFundingTransfer, RequestNewWhitelistedAddress, DeleteWhitelistedAddress, GetEstimatedGasFee } from "./libs/TypescriptTypes/TradingAPI";
import { GetHistoricalAuctions, GetHistoricalBars, GetLatestBars, GetConditionCodes, GetHistoricalQuotes, GetLatestQuotes, GetSnapshots, GetHistoricalTrades, GetLatestTrades, GetHistoricalAuctionsSingleSymbol, GetHistoricalBarsSingleSymbol, GetLatestBarSingleSymbol, GetHistoricalQuotesSingleSymbol, GetLatestQuoteSingleSymbol, GetSnapshotSingleSymbol, GetHistoricalTradesSingleSymbol, GetLatestTradeSingleSymbol } from "./libs/TypescriptTypes/MarketAPI/StockPhaseTypes";
declare class Alpaca {
    private readonly auth;
    constructor(auth: Authentication);
    getAccount(): Promise<object>;
    getAssets(params?: GetAssetsParams): Promise<object>;
    getAnAssetByIDorSymbol(params: GetAnAssetByIDorSymbol): Promise<object>;
    getOptionContracts(param?: GetOptionContracts): Promise<object>;
    getOptionContractByIDorSymbol(param: GetOptionContractByIDorSymbol): Promise<object>;
    getSpecificAnnouncement(id: string): Promise<object>;
    getAnnouncements(param: GetAnnouncements): Promise<object>;
    createAnOrder(param: CreateAnOrder): Promise<object>;
    getAllOrders(param: GetAllOrders): Promise<object>;
    deleteAllOrders(): Promise<object>;
    getOrderById(param: GetOrderById): Promise<object>;
    replaceOrderbyID(param: ReplaceOrderbyID): Promise<object>;
    deleteOrderbyID(param: DeleteOrderbyID): Promise<object>;
    getAllOpenPositions(): Promise<object>;
    closeAllPositions(param: CloseAllPositions): Promise<object>;
    getOpenPosition(param: GetOpenPosition): Promise<object>;
    closePosition(param: ClosePosition): Promise<object>;
    exerciseOptionPosition(param: ExerciseOptionPosition): Promise<object>;
    getPortfolioHistory(param: GetAccountPortfolioHistory): Promise<any>;
    getAllWatchlists(): Promise<object>;
    createWatchlist(data: CreateWatchlist): Promise<object>;
    getWatchlistbyID(id: GetWatchlistbyID): Promise<object>;
    updateWatchlistById(id: UpdateWatchlistById): Promise<object>;
    addAssettoWatchlist(id: AddAssettoWatchlist): Promise<object>;
    deleteWatchlistById(id: DeleteWatchlistById): Promise<object>;
    getWatchlistbyName(name: GetWatchlistbyName): Promise<object>;
    updateWatchlistByName(name: UpdateWatchlistByName): Promise<object>;
    addAssettoWatchlistByName(name: AddAssettoWatchlistByName): Promise<object>;
    deleteWatchlistByName(name: DeleteWatchlistByName): Promise<object>;
    deleteSymbolfromWatchlist(id: DeleteSymbolfromWatchlist): Promise<object>;
    getAccountConfigurations(): Promise<object>;
    updateAccountConfigurations(data: AccountConfigurations): Promise<object>;
    getMarketCalendarinfo(param?: GetMarketCalendarinfo): Promise<object>;
    clockAndCalendar(): Promise<object>;
    getRetrieveCryptoFundingWallets(param: GetRetrieveCryptoFundingWallets): Promise<any>;
    getRetrieveCryptoFundingTransfer(): Promise<any>;
    requestNewWithdrawal(data: RequestNewWithdrawal): Promise<any>;
    getRetrieveSingleCryptoFundingTransfer(queryParams: GetRetrieveCryptoFundingTransfer): Promise<any>;
    getArrayofWhitelistedAddresses(queryParams: GetRetrieveCryptoFundingWallets): Promise<any>;
    requestNewWhitelistedAddress(data: RequestNewWhitelistedAddress): Promise<any>;
    deleteWhitelistedAddress(data: DeleteWhitelistedAddress): Promise<any>;
    getEstimatedGasFee(queryParams: GetEstimatedGasFee): Promise<any>;
    getHistoricalCryptoFunding(queryParams: GetHistoricalAuctions): Promise<object>;
    getHistoricalBars(queryParams: GetHistoricalBars): Promise<object>;
    getLatestBars(queryParams: GetLatestBars): Promise<object>;
    getConditionCodes(queryParams: GetConditionCodes): Promise<object>;
    getExchangeCodes(): Promise<object>;
    getHistoricalQuotes(param: GetHistoricalQuotes): Promise<object>;
    getLatestQuotes(param: GetLatestQuotes): Promise<object>;
    getSnapshots(param: GetSnapshots): Promise<object>;
    getHistoricalTrades(param: GetHistoricalTrades): Promise<object>;
    getLatestTrades(param: GetLatestTrades): Promise<object>;
    getHistoricalAuctionsSingleSymbol(param: GetHistoricalAuctionsSingleSymbol): Promise<object>;
    getHistoricalBarsSingleSymbol(param: GetHistoricalBarsSingleSymbol): Promise<object>;
    getLatestBarSingleSymbol(param: GetLatestBarSingleSymbol): Promise<object>;
    getHistoricalQuotesSingleSymbol(param: GetHistoricalQuotesSingleSymbol): Promise<any>;
    getLatestQuoteSingleSymbol(param: GetLatestQuoteSingleSymbol): Promise<object>;
    getSnapshotSingleSymbol(param: GetSnapshotSingleSymbol): Promise<object>;
    getHistoricalTradesSingleSymbol(param: GetHistoricalTradesSingleSymbol): Promise<object>;
    getLatestTradeSingleSymbol(param: GetLatestTradeSingleSymbol): Promise<object>;
}
export default Alpaca;
